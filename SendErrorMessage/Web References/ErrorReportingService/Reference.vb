'------------------------------------------------------------------------------
' <auto-generated>
'     Dieser Code wurde von einem Tool generiert.
'     Laufzeitversion:4.0.30319.18052
'
'     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
'     der Code erneut generiert wird.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Der Quellcode wurde automatisch mit Microsoft.VSDesigner generiert. Version 4.0.30319.18052.
'
Namespace ErrorReportingService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ErrorReportingSoap", [Namespace]:="http://LoggingProvider")>  _
    Partial Public Class ErrorReporting
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendErrorMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendErrorMessageExUserMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendErrorMessageexOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.ClausSoftware.ErrorReporting.My.MySettings.Default.SendErrorMessage_ErrorReportingService_ErrorReporting
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendErrorMessageCompleted As SendErrorMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event SendErrorMessageExUserMessageCompleted As SendErrorMessageExUserMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event SendErrorMessageexCompleted As SendErrorMessageexCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFileCompleted As UploadFileCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://LoggingProvider/SendErrorMessage", RequestNamespace:="http://LoggingProvider", ResponseNamespace:="http://LoggingProvider", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendErrorMessage(ByVal errorText As String, ByVal SendersMail As String) As String
            Dim results() As Object = Me.Invoke("SendErrorMessage", New Object() {errorText, SendersMail})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendErrorMessageAsync(ByVal errorText As String, ByVal SendersMail As String)
            Me.SendErrorMessageAsync(errorText, SendersMail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendErrorMessageAsync(ByVal errorText As String, ByVal SendersMail As String, ByVal userState As Object)
            If (Me.SendErrorMessageOperationCompleted Is Nothing) Then
                Me.SendErrorMessageOperationCompleted = AddressOf Me.OnSendErrorMessageOperationCompleted
            End If
            Me.InvokeAsync("SendErrorMessage", New Object() {errorText, SendersMail}, Me.SendErrorMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendErrorMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendErrorMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendErrorMessageCompleted(Me, New SendErrorMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://LoggingProvider/SendErrorMessageExUserMessage", RequestNamespace:="http://LoggingProvider", ResponseNamespace:="http://LoggingProvider", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendErrorMessageExUserMessage(ByVal errorText As String, ByVal SendersMail As String, ByVal UserMessage As String, ByVal exceptionHashValue As Integer) As String
            Dim results() As Object = Me.Invoke("SendErrorMessageExUserMessage", New Object() {errorText, SendersMail, UserMessage, exceptionHashValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendErrorMessageExUserMessageAsync(ByVal errorText As String, ByVal SendersMail As String, ByVal UserMessage As String, ByVal exceptionHashValue As Integer)
            Me.SendErrorMessageExUserMessageAsync(errorText, SendersMail, UserMessage, exceptionHashValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendErrorMessageExUserMessageAsync(ByVal errorText As String, ByVal SendersMail As String, ByVal UserMessage As String, ByVal exceptionHashValue As Integer, ByVal userState As Object)
            If (Me.SendErrorMessageExUserMessageOperationCompleted Is Nothing) Then
                Me.SendErrorMessageExUserMessageOperationCompleted = AddressOf Me.OnSendErrorMessageExUserMessageOperationCompleted
            End If
            Me.InvokeAsync("SendErrorMessageExUserMessage", New Object() {errorText, SendersMail, UserMessage, exceptionHashValue}, Me.SendErrorMessageExUserMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendErrorMessageExUserMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendErrorMessageExUserMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendErrorMessageExUserMessageCompleted(Me, New SendErrorMessageExUserMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://LoggingProvider/SendErrorMessageex", RequestNamespace:="http://LoggingProvider", ResponseNamespace:="http://LoggingProvider", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendErrorMessageex(ByVal errorText As String, ByVal SendersMail As String, ByVal exceptionHashValue As Integer) As String
            Dim results() As Object = Me.Invoke("SendErrorMessageex", New Object() {errorText, SendersMail, exceptionHashValue})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendErrorMessageexAsync(ByVal errorText As String, ByVal SendersMail As String, ByVal exceptionHashValue As Integer)
            Me.SendErrorMessageexAsync(errorText, SendersMail, exceptionHashValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendErrorMessageexAsync(ByVal errorText As String, ByVal SendersMail As String, ByVal exceptionHashValue As Integer, ByVal userState As Object)
            If (Me.SendErrorMessageexOperationCompleted Is Nothing) Then
                Me.SendErrorMessageexOperationCompleted = AddressOf Me.OnSendErrorMessageexOperationCompleted
            End If
            Me.InvokeAsync("SendErrorMessageex", New Object() {errorText, SendersMail, exceptionHashValue}, Me.SendErrorMessageexOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendErrorMessageexOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendErrorMessageexCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendErrorMessageexCompleted(Me, New SendErrorMessageexCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://LoggingProvider/UploadFile", RequestNamespace:="http://LoggingProvider", ResponseNamespace:="http://LoggingProvider", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFile(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte, ByVal fileName As String) As String
            Dim results() As Object = Me.Invoke("UploadFile", New Object() {data, fileName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFileAsync(ByVal data() As Byte, ByVal fileName As String)
            Me.UploadFileAsync(data, fileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFileAsync(ByVal data() As Byte, ByVal fileName As String, ByVal userState As Object)
            If (Me.UploadFileOperationCompleted Is Nothing) Then
                Me.UploadFileOperationCompleted = AddressOf Me.OnUploadFileOperationCompleted
            End If
            Me.InvokeAsync("UploadFile", New Object() {data, fileName}, Me.UploadFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFileCompleted(Me, New UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendErrorMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SendErrorMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendErrorMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendErrorMessageExUserMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SendErrorMessageExUserMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendErrorMessageExUserMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub SendErrorMessageexCompletedEventHandler(ByVal sender As Object, ByVal e As SendErrorMessageexCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendErrorMessageexCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub UploadFileCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
